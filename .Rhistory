install.packages("RCurl")
install.packages("rjson")
help.start()
x <- rnorm(50)
y <- rnorm(x)
plot(x,y)
ls()
rm(x,y)
ls()
x<-1:20
w <- 1 + sqrt(x)/2
dummy <- data.frame(x=x,y=x+rnorm(x)*w)
fm <- lm(y~x,data=dummy,weight=1/w^2)
summary(fm)
fm1 <- lm (y~x, data=dummy,weight=1/w^2)
summary(fm1)
attach(dummy)
lrf<-lowess(x,y)
plot(x,y)
lines(x,lrf$y)
abline(0,1,lty=3)
abline(coef(fm))
abline(coef(fm1),col="red")
detach()
plot(fitted(fm),resid(fm),xlab="Fitted values",ylab="Residuals",main="Residuals vs Fitted")
qqnorm(resid(fm),main="Residuals Rankit Plot")
View(dummy)
rm(fm,fm1,lrf,x,dummy)
rm(w)
filepath <- system.files("data","morley.tab",package="datasets")
x <- seq(-pi,pi,len=50)
y <- x
f <- outer(x,y,function(x,y)cos(y)/(1+x^2))
oldpar <- par(no.readonly = TRUE)
par(pty="s")
contour(x,y,f)
contour(x,y,f nlevels=15, add=TRUE)
contour(x,y,f, nlevels=15, add=TRUE)
fa <- (t-t(f))/2
fa <- (f-t(f))/2
contour(x,y,fa,nlevels=15)
par(oldpar)
image(x,y,f)
image(x,y,fa)
objects();rm(x,y,f,fa)
th<-seq(-pi,pi,len=100)
z<-exp(li*th)
z<-exp(1i*th)
par(pty="s")
plot(z,type="1")
plot(z,type="l")
library()
search()
library()
source("./RGoogleAnalytics.R")
require("RGoogleAnalytics")
query <- QueryBuilder()
access_token <- query$authorize()
"access_token": "ya29.HgBRaJ-uLknJCR4AAADxj2iaXBbajyBLDM_6Da11MV6KU-R5V99EOB9nNTv-Sw",
"token_type": "Bearer",
"expires_in": 3600,
"refresh_token": "1/1vU0zALFkGYrwRUvfhuUWHuZqpaXi23w8dI9ihRRAxM"
}
"access_token": "ya29.HgBRaJ-uLknJCR4AAADxj2iaXBbajyBLDM_6Da11MV6KU-R5V99EOB9nNTv-Sw"
code=4%2F3J9_eXfa-ZaPdEQB3RswEuI-yAOa.AqcMlvh_rhkdOl05ti8ZT3ZJzUxLjAI&redirect_uri=https%3A%2F%2Fdevelopers.google.com%2Foauthplayground&client_id=407408718192.apps.googleusercontent.com&scope=&client_secret=************&grant_type=authorization_code
"access_token": "ya29.HgBRaJ-uLknJCR4AAADxj2iaXBbajyBLDM_6Da11MV6KU-R5V99EOB9nNTv-Sw",
"token_type": "Bearer",
"expires_in": 3600,
"refresh_token": "1/1vU0zALFkGYrwRUvfhuUWHuZqpaXi23w8dI9ihRRAxM"
query <- QueryBuilder()
access_token <- query$authorize()
conf <- Configuration()
ga.account <- conf$GetAccounts()
ga.account
ga.webProperty <- conf$GetWebProperty()
ga.webProperty
ga.webProfile <- conf$GetWebProfile(ga.account$id[1],ga.webProperty$id[2])
ga.webProfile
ga.goals <- conf$GetGoals()
ga <- RGoogleAnalytics()
ga.profiles <- ga$GetProfileData(access_token)
ga.profiles
profile <- ga.profiles$id[1]
startdate <- "2012-12-18"
enddate <- "2013-09-28"
dimension <- "ga:date,ga:source,ga:pageTitle,ga:pagePath"
metric <- "ga:visits"
ga.segments <- conf$GetSegments()
a <- available.packages()
install.packages("slidify")
install.packages("ggplot2")
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ggplot2)
search()
getwd()
dir()
1/0
1/Inf
0/0
x <- 1
print(x)
x
msg <- "hello"
print(msg)
msg
x <-c(0.5,0.6)
x
x <-9:29
x
x <- vector("numeric", lenght 10)
x <- vector("numeric", lenght=10)
x <- vector("numeric", length=10)
x
library(rtools)
install.packages("rtools")
install.packages("RPostgreSQL")
install.packages(c("rjson", "yaml"))
library 'RPostgreSQL'
library RPostgreSQL
drv <- dbDriver("PostgreSQL")
library()
help load
load?
load
library (RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="PT4",host="localhost",port=1234,user="postgres",password="ajrarn", )
dbConnect()
?dbConnect()
help(dbConnect())
help(dbConnect)
dbListConnections(drv)
con <- dbConnect(drv, dbname="tempdb")
con <- dbConnect(drv,dbname="PT4",user="postgres",password="ajrarn")
dbListConnections(drv)
dbListTables(con)
myTable <- dbGetQuery(con,"SELECT * FROM tourney_hand_player_statistics
WHERE id_player=6")
View(myTable)
help(kmeans)
?as.numric
?as.numeric
as.numeric(factor(6:10))
factor(6:10)
factor(6:10)
as.numeric(factor(6:10))
as.character(factor(5:10))
as.numeric(as.character(factor(5:10)))
as.numeric(c("-.1"," 2.7 ","B"))
?levels
as.numeric(levels(factor(5:10)))
install.packages("knitr")
getwd()
cd d:
cd ..
ls
ls()
cd()
setwd("D:\Dev\Workspace\Data-Scientist\R\R programming\PA 1")
setwd("~/")
setwd("D:/Dev/Workspace/Data-Scientist/R/R programming/PA 1")
ls
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
setwd("D:/Dev/Workspace/Data-Scientist/R/R programming/PA 1")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("xtable")
head(data)
?head
data <- read.table(unz("activity.zip","activity.csv"), sep=",", header=TRUE)
setwd("D:/Dev/Workspace/Data-Scientist/Reproductible Research/RepData_PeerAssessment1")
data <- read.table(unz("activity.zip","activity.csv"), sep=",", header=TRUE)
data <- read.table(unz("activity.zip","activity.csv"), sep=",", header=TRUE)
head(data)
class(data$date)
tail(data)
data$date <- as.Date(data$date, format="%Y-%m-%d")
class(data$date)
head(data)
View(data)
sum(data$steps)
install.packages("plyr")
install.packages("ddply")
library(plyr)
ddply( data , .(date) , summarize , nb_steps = sum(steps))
x =ddply( data , .(date) , summarize , nb_steps = sum(steps))
hist(x)
?hist
hist(x)
head(x)
hist(x$nb_steps)
hist(x$date)
plot(x)
plot(x,type="l")
install.packages("lattice")
library(lattice)
?histogram
histogram(data$steps | data$date)
histogram(data$steps | as.factor(data$date))
> data(Chem97, package = "mlmRev")
data(Chem97, package = "mlmRev")
install.packages("mlmRev")
data(Chem97, package = "mlmRev")
head(Chem97)
histogram(~ gcsescore, data = Chem97)
histogram(~ steps, data = data)
histogram(~ steps | factor(date), data = data)
histogram(~ date, data = data)
aggregate(date ~ steps, data, sum)
aggregate(steps ~ date, data, sum)
library (data.table)
DT <- data.table(data)
DT[,sum(steps), by = date]
hist(DT[,sum(steps), by = date])
hist(DT[,sum(steps), by = date],v1)
hist(DT[,sum(steps), by = date]$v1)
DT[,sum(steps), by = date]$v1
DT[,sum(steps), by = date]
DT[,sum(steps), by = date][,v1]
DT[,sum(steps), by = date][,2]
DT[,sum(steps), by = date][2]
DT[,sum(steps), by = date]["v1"]
DT[,sum(steps), by = date][1]
DT[,sum(steps), by = date][,1]
DT[,sum(steps), by = date][,2]
DT[,sum(steps), by = date][,3]
aggregate(steps ~ date, data, sum)
hist(aggregate(steps ~ date, data, sum))
aggregate(steps ~ date, data, sum)
hist(aggregate(steps ~ date, data, sum)["steps"])
hist(aggregate(steps ~ date, data, sum)[,steps])
aggregate(steps ~ date, data, sum)[steps]
aggregate(steps ~ date, data, sum)[,steps]
dailydata <- aggregate(steps ~ date, data, sum)
dailydata$steps
hist(dailydata$steps)
rawdailydata <- aggregate(steps ~ date, data, sum)
hist(rawdailydata$steps, bin=10)
hist(rawdailydata$steps, breaks=10)
hist(rawdailydata$steps, breaks=25)
hist(rawdailydata$steps, breaks=15)
hist(rawdailydata$steps, breaks=20)
hist(rawdailydata$steps, breaks=10)
hist(rawdailydata$steps, breaks=10, title = "Histogram of steps per day", xlab="Number of steps per day")
hist(rawdailydata$steps, breaks=10, main = "Histogram of steps per day", xlab="Number of steps per day")
hist(rawdailydata$steps, breaks=10, xlab="Number of steps per day")
hist(rawdailydata$steps, breaks=10, xlab="Number of steps per day", main="blabla")
hist(rawdailydata$steps, breaks=10, xlab="Number of steps per day", main="Frequency of steps per day")
hist(rawdailydata$steps, breaks=10, xlab="Number of steps per day", main="Number of steps per day")
mean(rawdailydata$steps)
median(rawdailydata$steps)
summarise(rawdailydata)
summarise(rawdailydata$steps)
summary(rawdailydata)
summary(rawdailydata$steps)
rawintervaldata <- aggregate(steps ~ interval, mean)
rawintervaldata <- aggregate(steps ~ interval, data, mean)
head(rawintervaldata)
plot (rawintervaldata)
plot (rawintervaldata, type="l")
plot (rawintervaldata, type="l", ylab="Average number of steps", main="Average number of steps per interval")
rawintervaldata[,steps]
rawintervaldata[,"steps"]
rawintervaldata[,"steps"=1.7169811]
rawintervaldata[,"steps"==1.7169811]
max(rawintervaldata[,"steps"])
?subset
?subset()
rawintervaldata[ which(rawintervaldata$steps == max(rawintervaldata[,"steps"]))]
rawintervaldata[rawintervaldata$steps == max(rawintervaldata[,"steps"]),]
rawintervaldata[rawintervaldata$steps == max(rawintervaldata[,"steps"]),][interval]
rawintervaldata[rawintervaldata$steps == max(rawintervaldata[,"steps"]),][,interval]
rawintervaldata[rawintervaldata$steps == max(rawintervaldata[,"steps"]),][,"interval"]
rawintervaldata[rawintervaldata$steps == max(rawintervaldata[,"steps"]),][,"interval"]
?read.table
is.na(data$interval)
sum(is.na(data$interval))
data$interval
sum(is.na(data$steps))
is.na(data$steps)
isMissing <-is.na(data$steps)
new
newData <- Data
newData <- data
breaks <- structure(list(Break = 1:11, Value = c(2L, 13L, 7L, 9L, 40L,
21L, 10L, 37L, 7L, 26L, 42L)), .Names = c("Break", "Value"), class = "data.frame", row.names = c(NA,
-11L))
head(breaks)
fsites <- structure(list(Site = c(1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L,
3L, 3L, 3L, 3L), Plot = c(0L, 1L, 2L, 3L, 4L, 0L, 1L, 2L, 0L,
1L, 2L, 3L, 4L, 5L), Break = c(1L, 5L, 7L, 8L, 11L, 1L, 6L, 11L,
1L, 4L, 6L, 8L, 9L, 11L)), .Names = c("Site", "Plot", "Break"
), class = "data.frame", row.names = c(NA, -14L))
head(fsites)
bps <- structure(list(Site = c(1L, 1L, 1L, 1L, 2L, 2L, 3L, 3L, 3L, 3L,
3L), Plot = c(0L, 1L, 2L, 3L, 1L, 2L, 0L, 1L, 2L, 3L, 4L), Value = c(0.393309653,
0.12465733, 0.27380161, 0.027288989, 0.439712533, 0.289724079,
0.036429062, 0.577460008, 0.820375917, 0.323217357, 0.28637503
)), .Names = c("Site", "Plot", "Value"), class = "data.frame", row.names = c(NA,
-11L))
head(bps)
df1 <- merge(fsites, bps, by=c("Site", "Plot"), all.x=T)
df1 <- merge(fsites, bps, by=c("Site", "Plot"), all.x=T)
df2 <- merge(df1, breaks, by=c("Break"))*
df2 <- merge(df1, breaks, by=c("Break"))
df2 <- merge(df1, breaks, by=c("Break"))
df3 <- df2
df3$Value <- df2$Value.x
df2.na <- is.na(df2$Value.x)
df3$Value[df2.na] <- df2$Value.y[df2.na]
View(newData)
View(rawintervaldata)
newData[ismissing]
newData$steps
newData[isMissing]
newData["steps"=isMissing]
newData["steps"==isMissing]
newData[is.na(newData)]
newData[is.na(newData)][,steps]
newData[isMissing,]
newData[isMissing,][,"steps"]
?lm
completeData <- data[isMissing==False,]
completeData <- data[complete.cases(data),]
sum(is.na(completeData))
?merge
?merge()
merge(newData, rawintervaldata$steps, by = "interval" )
merge(newData, rawintervaldata, by = "interval" )
head(merge(newData, rawintervaldata, by = "interval" ))
newData <- head(merge(newData, rawintervaldata, by = "interval" ))
newData <- data
newData <- merge(newData, rawintervaldata, by = "interval" ))
newData <- merge(newData, rawintervaldata, by = "interval" )
newData[isMissing,]["steps.x"]<-newData["steps.y"]
newData[isMissing,]["steps.x"]<-newData[isMissing,]["steps.y"]
heads(newData)
head(newData)
View(newData)
newData <- data
newData[isMissing,]<-merge(newData, rawintervaldata, by = "interval" )
newData <- data
newData<-merge(newData, rawintervaldata, by = "interval" )
View(newData)
View(data)
?sort()
is.na(newData)
sum(is.na(newData))
newData[is.na(newData),]["steps.x"]<-newData[is.na(newData),]["steps.y"]
newData[is.na(newData),]["steps.x"]
isMissing <-is.na(newData$steps)
isMissing <-is.na(newData$steps.x)
sum(isMissing)
newData[isMissing,]["steps.x"]<-newData[isMissing,]["steps.y"]
sum(is.na(newData))
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
In this part we will transform the date column which is processed as a factor into a date format.
```{r}
data <- read.table(unz("activity.zip","activity.csv"), sep=",", header=TRUE)
data$date <- as.Date(data$date, format="%Y-%m-%d")
```
## What is mean total number of steps taken per day?
We first create a new dataframe with the number of steps taken each day.
The function aggregate will ignore the missing value and thus when there is no value for a given day this day will not be included in this new dataframe.
```{r}
rawdailydata <- aggregate(steps ~ date, data, sum)
```
We create an histogram using the basic hist function
```{r scatterplot}
hist(rawdailydata$steps, breaks=10, xlab="Number of steps per day", main="Number of steps per day")
```
We then calculate the mean and the median of the number of steps per day.
And we also use the summary function to the mean, median, quartiles.
```{r}
mean(rawdailydata$steps)
median(rawdailydata$steps)
summary(rawdailydata$steps)
```
## What is the average daily activity pattern?
To get the daily activity pattern we need to create a new dataset aggregating the steps by interval using the mean function
```{r}
rawintervaldata <- aggregate(steps ~ interval, data, mean)
```
We then plot the data using the type="l" option.
```{r scatterplot2}
plot (rawintervaldata, type="l", ylab="Average number of steps", main="Average number of steps per interval")
```
We then find the interval with the maximum number of steps :
```{r}
rawintervaldata[rawintervaldata$steps == max(rawintervaldata[,"steps"]),][,"interval"]
```
## Imputing missing values
The number of missing value in the "steps" column is given by :
```{r}
isMissing <-is.na(data$steps)
sum(is.na(data$steps)
```
We first duplicate our initial dataset in a new dataset then to fill the missing values we use the mean value on the given interval.
```{r}
newData <- data
newData <- merge(newData, rawintervaldata, by = "interval" )
isMissing <-is.na(newData$steps.x)
newData[isMissing,]["steps.x"]<-newData[isMissing,]["steps.y"]
```
## Are there differences in activity patterns between weekdays and weekends?
sum(is.na(data$steps)
